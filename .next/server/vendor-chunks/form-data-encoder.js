"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/form-data-encoder";
exports.ids = ["vendor-chunks/form-data-encoder"];
exports.modules = {

/***/ "(rsc)/./node_modules/form-data-encoder/lib/index.cjs":
/*!******************************************************!*\
  !*** ./node_modules/form-data-encoder/lib/index.cjs ***!
  \******************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj))\n    throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter) => {\n  __accessCheck(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj))\n    throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter) => {\n  __accessCheck(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar __privateMethod = (obj, member, method) => {\n  __accessCheck(obj, member, \"access private method\");\n  return method;\n};\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  FormDataEncoder: () => FormDataEncoder,\n  isFile: () => isFile,\n  isFormData: () => isFormData\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/util/isFunction.ts\nvar isFunction = (value) => typeof value === \"function\";\n\n// src/util/isAsyncIterable.ts\nvar isAsyncIterable = (value) => isFunction(value[Symbol.asyncIterator]);\n\n// src/util/chunk.ts\nvar MAX_CHUNK_SIZE = 65536;\nfunction* chunk(value) {\n  if (value.byteLength <= MAX_CHUNK_SIZE) {\n    yield value;\n    return;\n  }\n  let offset = 0;\n  while (offset < value.byteLength) {\n    const size = Math.min(value.byteLength - offset, MAX_CHUNK_SIZE);\n    const buffer = value.buffer.slice(offset, offset + size);\n    offset += buffer.byteLength;\n    yield new Uint8Array(buffer);\n  }\n}\n\n// src/util/getStreamIterator.ts\nasync function* readStream(readable) {\n  const reader = readable.getReader();\n  while (true) {\n    const { done, value } = await reader.read();\n    if (done) {\n      break;\n    }\n    yield value;\n  }\n}\nasync function* chunkStream(stream) {\n  for await (const value of stream) {\n    yield* chunk(value);\n  }\n}\nvar getStreamIterator = (source) => {\n  if (isAsyncIterable(source)) {\n    return chunkStream(source);\n  }\n  if (isFunction(source.getReader)) {\n    return chunkStream(readStream(source));\n  }\n  throw new TypeError(\n    \"Unsupported data source: Expected either ReadableStream or async iterable.\"\n  );\n};\n\n// src/util/createBoundary.ts\nvar alphabet = \"abcdefghijklmnopqrstuvwxyz0123456789\";\nfunction createBoundary() {\n  let size = 16;\n  let res = \"\";\n  while (size--) {\n    res += alphabet[Math.random() * alphabet.length << 0];\n  }\n  return res;\n}\n\n// src/util/normalizeValue.ts\nvar normalizeValue = (value) => String(value).replace(/\\r|\\n/g, (match, i, str) => {\n  if (match === \"\\r\" && str[i + 1] !== \"\\n\" || match === \"\\n\" && str[i - 1] !== \"\\r\") {\n    return \"\\r\\n\";\n  }\n  return match;\n});\n\n// src/util/isPlainObject.ts\nvar getType = (value) => Object.prototype.toString.call(value).slice(8, -1).toLowerCase();\nfunction isPlainObject(value) {\n  if (getType(value) !== \"object\") {\n    return false;\n  }\n  const pp = Object.getPrototypeOf(value);\n  if (pp === null || pp === void 0) {\n    return true;\n  }\n  const Ctor = pp.constructor && pp.constructor.toString();\n  return Ctor === Object.toString();\n}\n\n// src/util/proxyHeaders.ts\nfunction getProperty(target, prop) {\n  if (typeof prop === \"string\") {\n    for (const [name, value] of Object.entries(target)) {\n      if (prop.toLowerCase() === name.toLowerCase()) {\n        return value;\n      }\n    }\n  }\n  return void 0;\n}\nvar proxyHeaders = (object) => new Proxy(\n  object,\n  {\n    get: (target, prop) => getProperty(target, prop),\n    has: (target, prop) => getProperty(target, prop) !== void 0\n  }\n);\n\n// src/util/isFormData.ts\nvar isFormData = (value) => Boolean(\n  value && isFunction(value.constructor) && value[Symbol.toStringTag] === \"FormData\" && isFunction(value.append) && isFunction(value.getAll) && isFunction(value.entries) && isFunction(value[Symbol.iterator])\n);\n\n// src/util/escapeName.ts\nvar escapeName = (name) => String(name).replace(/\\r/g, \"%0D\").replace(/\\n/g, \"%0A\").replace(/\"/g, \"%22\");\n\n// src/util/isFile.ts\nvar isFile = (value) => Boolean(\n  value && typeof value === \"object\" && isFunction(value.constructor) && value[Symbol.toStringTag] === \"File\" && isFunction(value.stream) && value.name != null\n);\n\n// src/FormDataEncoder.ts\nvar defaultOptions = {\n  enableAdditionalHeaders: false\n};\nvar readonlyProp = { writable: false, configurable: false };\nvar _CRLF, _CRLF_BYTES, _CRLF_BYTES_LENGTH, _DASHES, _encoder, _footer, _form, _options, _getFieldHeader, getFieldHeader_fn, _getContentLength, getContentLength_fn;\nvar FormDataEncoder = class {\n  constructor(form, boundaryOrOptions, options) {\n    __privateAdd(this, _getFieldHeader);\n    /**\n     * Returns form-data content length\n     */\n    __privateAdd(this, _getContentLength);\n    __privateAdd(this, _CRLF, \"\\r\\n\");\n    __privateAdd(this, _CRLF_BYTES, void 0);\n    __privateAdd(this, _CRLF_BYTES_LENGTH, void 0);\n    __privateAdd(this, _DASHES, \"-\".repeat(2));\n    /**\n     * TextEncoder instance\n     */\n    __privateAdd(this, _encoder, new TextEncoder());\n    /**\n     * Returns form-data footer bytes\n     */\n    __privateAdd(this, _footer, void 0);\n    /**\n     * FormData instance\n     */\n    __privateAdd(this, _form, void 0);\n    /**\n     * Instance options\n     */\n    __privateAdd(this, _options, void 0);\n    if (!isFormData(form)) {\n      throw new TypeError(\"Expected first argument to be a FormData instance.\");\n    }\n    let boundary;\n    if (isPlainObject(boundaryOrOptions)) {\n      options = boundaryOrOptions;\n    } else {\n      boundary = boundaryOrOptions;\n    }\n    if (!boundary) {\n      boundary = createBoundary();\n    }\n    if (typeof boundary !== \"string\") {\n      throw new TypeError(\"Expected boundary argument to be a string.\");\n    }\n    if (options && !isPlainObject(options)) {\n      throw new TypeError(\"Expected options argument to be an object.\");\n    }\n    __privateSet(this, _form, Array.from(form.entries()));\n    __privateSet(this, _options, { ...defaultOptions, ...options });\n    __privateSet(this, _CRLF_BYTES, __privateGet(this, _encoder).encode(__privateGet(this, _CRLF)));\n    __privateSet(this, _CRLF_BYTES_LENGTH, __privateGet(this, _CRLF_BYTES).byteLength);\n    this.boundary = `form-data-boundary-${boundary}`;\n    this.contentType = `multipart/form-data; boundary=${this.boundary}`;\n    __privateSet(this, _footer, __privateGet(this, _encoder).encode(\n      `${__privateGet(this, _DASHES)}${this.boundary}${__privateGet(this, _DASHES)}${__privateGet(this, _CRLF).repeat(2)}`\n    ));\n    const headers = {\n      \"Content-Type\": this.contentType\n    };\n    const contentLength = __privateMethod(this, _getContentLength, getContentLength_fn).call(this);\n    if (contentLength) {\n      this.contentLength = contentLength;\n      headers[\"Content-Length\"] = contentLength;\n    }\n    this.headers = proxyHeaders(Object.freeze(headers));\n    Object.defineProperties(this, {\n      boundary: readonlyProp,\n      contentType: readonlyProp,\n      contentLength: readonlyProp,\n      headers: readonlyProp\n    });\n  }\n  /**\n   * Creates an iterator allowing to go through form-data parts (with metadata).\n   * This method **will not** read the files and **will not** split values big into smaller chunks.\n   *\n   * Using this method, you can convert form-data content into Blob:\n   *\n   * @example\n   *\n   * ```ts\n   * import {Readable} from \"stream\"\n   *\n   * import {FormDataEncoder} from \"form-data-encoder\"\n   *\n   * import {FormData} from \"formdata-polyfill/esm-min.js\"\n   * import {fileFrom} from \"fetch-blob/form.js\"\n   * import {File} from \"fetch-blob/file.js\"\n   * import {Blob} from \"fetch-blob\"\n   *\n   * import fetch from \"node-fetch\"\n   *\n   * const form = new FormData()\n   *\n   * form.set(\"field\", \"Just a random string\")\n   * form.set(\"file\", new File([\"Using files is class amazing\"]))\n   * form.set(\"fileFromPath\", await fileFrom(\"path/to/a/file.txt\"))\n   *\n   * const encoder = new FormDataEncoder(form)\n   *\n   * const options = {\n   *   method: \"post\",\n   *   body: new Blob(encoder, {type: encoder.contentType})\n   * }\n   *\n   * const response = await fetch(\"https://httpbin.org/post\", options)\n   *\n   * console.log(await response.json())\n   * ```\n   */\n  *values() {\n    for (const [name, raw] of __privateGet(this, _form)) {\n      const value = isFile(raw) ? raw : __privateGet(this, _encoder).encode(\n        normalizeValue(raw)\n      );\n      yield __privateMethod(this, _getFieldHeader, getFieldHeader_fn).call(this, name, value);\n      yield value;\n      yield __privateGet(this, _CRLF_BYTES);\n    }\n    yield __privateGet(this, _footer);\n  }\n  /**\n   * Creates an async iterator allowing to perform the encoding by portions.\n   * This method reads through files and splits big values into smaller pieces (65536 bytes per each).\n   *\n   * @example\n   *\n   * ```ts\n   * import {Readable} from \"stream\"\n   *\n   * import {FormData, File, fileFromPath} from \"formdata-node\"\n   * import {FormDataEncoder} from \"form-data-encoder\"\n   *\n   * import fetch from \"node-fetch\"\n   *\n   * const form = new FormData()\n   *\n   * form.set(\"field\", \"Just a random string\")\n   * form.set(\"file\", new File([\"Using files is class amazing\"], \"file.txt\"))\n   * form.set(\"fileFromPath\", await fileFromPath(\"path/to/a/file.txt\"))\n   *\n   * const encoder = new FormDataEncoder(form)\n   *\n   * const options = {\n   *   method: \"post\",\n   *   headers: encoder.headers,\n   *   body: Readable.from(encoder.encode()) // or Readable.from(encoder)\n   * }\n   *\n   * const response = await fetch(\"https://httpbin.org/post\", options)\n   *\n   * console.log(await response.json())\n   * ```\n   */\n  async *encode() {\n    for (const part of this.values()) {\n      if (isFile(part)) {\n        yield* getStreamIterator(part.stream());\n      } else {\n        yield* chunk(part);\n      }\n    }\n  }\n  /**\n   * Creates an iterator allowing to read through the encoder data using for...of loops\n   */\n  [Symbol.iterator]() {\n    return this.values();\n  }\n  /**\n   * Creates an **async** iterator allowing to read through the encoder data using for-await...of loops\n   */\n  [Symbol.asyncIterator]() {\n    return this.encode();\n  }\n};\n_CRLF = new WeakMap();\n_CRLF_BYTES = new WeakMap();\n_CRLF_BYTES_LENGTH = new WeakMap();\n_DASHES = new WeakMap();\n_encoder = new WeakMap();\n_footer = new WeakMap();\n_form = new WeakMap();\n_options = new WeakMap();\n_getFieldHeader = new WeakSet();\ngetFieldHeader_fn = function(name, value) {\n  let header = \"\";\n  header += `${__privateGet(this, _DASHES)}${this.boundary}${__privateGet(this, _CRLF)}`;\n  header += `Content-Disposition: form-data; name=\"${escapeName(name)}\"`;\n  if (isFile(value)) {\n    header += `; filename=\"${escapeName(value.name)}\"${__privateGet(this, _CRLF)}`;\n    header += `Content-Type: ${value.type || \"application/octet-stream\"}`;\n  }\n  if (__privateGet(this, _options).enableAdditionalHeaders === true) {\n    const size = isFile(value) ? value.size : value.byteLength;\n    if (size != null && !isNaN(size)) {\n      header += `${__privateGet(this, _CRLF)}Content-Length: ${size}`;\n    }\n  }\n  return __privateGet(this, _encoder).encode(`${header}${__privateGet(this, _CRLF).repeat(2)}`);\n};\n_getContentLength = new WeakSet();\ngetContentLength_fn = function() {\n  let length = 0;\n  for (const [name, raw] of __privateGet(this, _form)) {\n    const value = isFile(raw) ? raw : __privateGet(this, _encoder).encode(\n      normalizeValue(raw)\n    );\n    const size = isFile(value) ? value.size : value.byteLength;\n    if (size == null || isNaN(size)) {\n      return void 0;\n    }\n    length += __privateMethod(this, _getFieldHeader, getFieldHeader_fn).call(this, name, value).byteLength;\n    length += size;\n    length += __privateGet(this, _CRLF_BYTES_LENGTH);\n  }\n  return String(length + __privateGet(this, _footer).byteLength);\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZm9ybS1kYXRhLWVuY29kZXIvbGliL2luZGV4LmNqcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixrQ0FBa0M7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw0RkFBNEY7QUFDekg7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELGtCQUFrQixhQUFhO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxjQUFjO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLCtCQUErQjtBQUNsRTtBQUNBO0FBQ0EsMENBQTBDLFNBQVM7QUFDbkQsNkNBQTZDLFdBQVcsY0FBYztBQUN0RTtBQUNBLFNBQVMsNEJBQTRCLEVBQUUsY0FBYyxFQUFFLDRCQUE0QixFQUFFLG9DQUFvQztBQUN6SDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFVBQVU7QUFDdkI7QUFDQSxhQUFhLGlCQUFpQjtBQUM5QjtBQUNBLGFBQWEsVUFBVTtBQUN2QixhQUFhLFVBQVU7QUFDdkIsYUFBYSxNQUFNO0FBQ25CLGFBQWEsTUFBTTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQywwQkFBMEI7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFVBQVU7QUFDdkI7QUFDQSxhQUFhLDhCQUE4QjtBQUMzQyxhQUFhLGlCQUFpQjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSw0QkFBNEIsRUFBRSxjQUFjLEVBQUUsMEJBQTBCO0FBQ3ZGLDZDQUE2QyxRQUFRLGlCQUFpQjtBQUN0RTtBQUNBLGlCQUFpQixZQUFZLHVCQUF1QixHQUFHLDBCQUEwQjtBQUNqRiwrQkFBK0IseUNBQXlDO0FBQ3hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLDBCQUEwQixrQkFBa0IsS0FBSztBQUNwRTtBQUNBO0FBQ0EsZ0RBQWdELE9BQU8sRUFBRSxvQ0FBb0M7QUFDN0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLENBSUwiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb2RjYXN0ci8uL25vZGVfbW9kdWxlcy9mb3JtLWRhdGEtZW5jb2Rlci9saWIvaW5kZXguY2pzP2EzYTQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICBmb3IgKHZhciBuYW1lIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xudmFyIF9fYWNjZXNzQ2hlY2sgPSAob2JqLCBtZW1iZXIsIG1zZykgPT4ge1xuICBpZiAoIW1lbWJlci5oYXMob2JqKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoXCJDYW5ub3QgXCIgKyBtc2cpO1xufTtcbnZhciBfX3ByaXZhdGVHZXQgPSAob2JqLCBtZW1iZXIsIGdldHRlcikgPT4ge1xuICBfX2FjY2Vzc0NoZWNrKG9iaiwgbWVtYmVyLCBcInJlYWQgZnJvbSBwcml2YXRlIGZpZWxkXCIpO1xuICByZXR1cm4gZ2V0dGVyID8gZ2V0dGVyLmNhbGwob2JqKSA6IG1lbWJlci5nZXQob2JqKTtcbn07XG52YXIgX19wcml2YXRlQWRkID0gKG9iaiwgbWVtYmVyLCB2YWx1ZSkgPT4ge1xuICBpZiAobWVtYmVyLmhhcyhvYmopKVxuICAgIHRocm93IFR5cGVFcnJvcihcIkNhbm5vdCBhZGQgdGhlIHNhbWUgcHJpdmF0ZSBtZW1iZXIgbW9yZSB0aGFuIG9uY2VcIik7XG4gIG1lbWJlciBpbnN0YW5jZW9mIFdlYWtTZXQgPyBtZW1iZXIuYWRkKG9iaikgOiBtZW1iZXIuc2V0KG9iaiwgdmFsdWUpO1xufTtcbnZhciBfX3ByaXZhdGVTZXQgPSAob2JqLCBtZW1iZXIsIHZhbHVlLCBzZXR0ZXIpID0+IHtcbiAgX19hY2Nlc3NDaGVjayhvYmosIG1lbWJlciwgXCJ3cml0ZSB0byBwcml2YXRlIGZpZWxkXCIpO1xuICBzZXR0ZXIgPyBzZXR0ZXIuY2FsbChvYmosIHZhbHVlKSA6IG1lbWJlci5zZXQob2JqLCB2YWx1ZSk7XG4gIHJldHVybiB2YWx1ZTtcbn07XG52YXIgX19wcml2YXRlTWV0aG9kID0gKG9iaiwgbWVtYmVyLCBtZXRob2QpID0+IHtcbiAgX19hY2Nlc3NDaGVjayhvYmosIG1lbWJlciwgXCJhY2Nlc3MgcHJpdmF0ZSBtZXRob2RcIik7XG4gIHJldHVybiBtZXRob2Q7XG59O1xuXG4vLyBzcmMvaW5kZXgudHNcbnZhciBzcmNfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoc3JjX2V4cG9ydHMsIHtcbiAgRm9ybURhdGFFbmNvZGVyOiAoKSA9PiBGb3JtRGF0YUVuY29kZXIsXG4gIGlzRmlsZTogKCkgPT4gaXNGaWxlLFxuICBpc0Zvcm1EYXRhOiAoKSA9PiBpc0Zvcm1EYXRhXG59KTtcbm1vZHVsZS5leHBvcnRzID0gX190b0NvbW1vbkpTKHNyY19leHBvcnRzKTtcblxuLy8gc3JjL3V0aWwvaXNGdW5jdGlvbi50c1xudmFyIGlzRnVuY3Rpb24gPSAodmFsdWUpID0+IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiO1xuXG4vLyBzcmMvdXRpbC9pc0FzeW5jSXRlcmFibGUudHNcbnZhciBpc0FzeW5jSXRlcmFibGUgPSAodmFsdWUpID0+IGlzRnVuY3Rpb24odmFsdWVbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKTtcblxuLy8gc3JjL3V0aWwvY2h1bmsudHNcbnZhciBNQVhfQ0hVTktfU0laRSA9IDY1NTM2O1xuZnVuY3Rpb24qIGNodW5rKHZhbHVlKSB7XG4gIGlmICh2YWx1ZS5ieXRlTGVuZ3RoIDw9IE1BWF9DSFVOS19TSVpFKSB7XG4gICAgeWllbGQgdmFsdWU7XG4gICAgcmV0dXJuO1xuICB9XG4gIGxldCBvZmZzZXQgPSAwO1xuICB3aGlsZSAob2Zmc2V0IDwgdmFsdWUuYnl0ZUxlbmd0aCkge1xuICAgIGNvbnN0IHNpemUgPSBNYXRoLm1pbih2YWx1ZS5ieXRlTGVuZ3RoIC0gb2Zmc2V0LCBNQVhfQ0hVTktfU0laRSk7XG4gICAgY29uc3QgYnVmZmVyID0gdmFsdWUuYnVmZmVyLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgc2l6ZSk7XG4gICAgb2Zmc2V0ICs9IGJ1ZmZlci5ieXRlTGVuZ3RoO1xuICAgIHlpZWxkIG5ldyBVaW50OEFycmF5KGJ1ZmZlcik7XG4gIH1cbn1cblxuLy8gc3JjL3V0aWwvZ2V0U3RyZWFtSXRlcmF0b3IudHNcbmFzeW5jIGZ1bmN0aW9uKiByZWFkU3RyZWFtKHJlYWRhYmxlKSB7XG4gIGNvbnN0IHJlYWRlciA9IHJlYWRhYmxlLmdldFJlYWRlcigpO1xuICB3aGlsZSAodHJ1ZSkge1xuICAgIGNvbnN0IHsgZG9uZSwgdmFsdWUgfSA9IGF3YWl0IHJlYWRlci5yZWFkKCk7XG4gICAgaWYgKGRvbmUpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICB5aWVsZCB2YWx1ZTtcbiAgfVxufVxuYXN5bmMgZnVuY3Rpb24qIGNodW5rU3RyZWFtKHN0cmVhbSkge1xuICBmb3IgYXdhaXQgKGNvbnN0IHZhbHVlIG9mIHN0cmVhbSkge1xuICAgIHlpZWxkKiBjaHVuayh2YWx1ZSk7XG4gIH1cbn1cbnZhciBnZXRTdHJlYW1JdGVyYXRvciA9IChzb3VyY2UpID0+IHtcbiAgaWYgKGlzQXN5bmNJdGVyYWJsZShzb3VyY2UpKSB7XG4gICAgcmV0dXJuIGNodW5rU3RyZWFtKHNvdXJjZSk7XG4gIH1cbiAgaWYgKGlzRnVuY3Rpb24oc291cmNlLmdldFJlYWRlcikpIHtcbiAgICByZXR1cm4gY2h1bmtTdHJlYW0ocmVhZFN0cmVhbShzb3VyY2UpKTtcbiAgfVxuICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgIFwiVW5zdXBwb3J0ZWQgZGF0YSBzb3VyY2U6IEV4cGVjdGVkIGVpdGhlciBSZWFkYWJsZVN0cmVhbSBvciBhc3luYyBpdGVyYWJsZS5cIlxuICApO1xufTtcblxuLy8gc3JjL3V0aWwvY3JlYXRlQm91bmRhcnkudHNcbnZhciBhbHBoYWJldCA9IFwiYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5XCI7XG5mdW5jdGlvbiBjcmVhdGVCb3VuZGFyeSgpIHtcbiAgbGV0IHNpemUgPSAxNjtcbiAgbGV0IHJlcyA9IFwiXCI7XG4gIHdoaWxlIChzaXplLS0pIHtcbiAgICByZXMgKz0gYWxwaGFiZXRbTWF0aC5yYW5kb20oKSAqIGFscGhhYmV0Lmxlbmd0aCA8PCAwXTtcbiAgfVxuICByZXR1cm4gcmVzO1xufVxuXG4vLyBzcmMvdXRpbC9ub3JtYWxpemVWYWx1ZS50c1xudmFyIG5vcm1hbGl6ZVZhbHVlID0gKHZhbHVlKSA9PiBTdHJpbmcodmFsdWUpLnJlcGxhY2UoL1xccnxcXG4vZywgKG1hdGNoLCBpLCBzdHIpID0+IHtcbiAgaWYgKG1hdGNoID09PSBcIlxcclwiICYmIHN0cltpICsgMV0gIT09IFwiXFxuXCIgfHwgbWF0Y2ggPT09IFwiXFxuXCIgJiYgc3RyW2kgLSAxXSAhPT0gXCJcXHJcIikge1xuICAgIHJldHVybiBcIlxcclxcblwiO1xuICB9XG4gIHJldHVybiBtYXRjaDtcbn0pO1xuXG4vLyBzcmMvdXRpbC9pc1BsYWluT2JqZWN0LnRzXG52YXIgZ2V0VHlwZSA9ICh2YWx1ZSkgPT4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKS5zbGljZSg4LCAtMSkudG9Mb3dlckNhc2UoKTtcbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgaWYgKGdldFR5cGUodmFsdWUpICE9PSBcIm9iamVjdFwiKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IHBwID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbHVlKTtcbiAgaWYgKHBwID09PSBudWxsIHx8IHBwID09PSB2b2lkIDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBjb25zdCBDdG9yID0gcHAuY29uc3RydWN0b3IgJiYgcHAuY29uc3RydWN0b3IudG9TdHJpbmcoKTtcbiAgcmV0dXJuIEN0b3IgPT09IE9iamVjdC50b1N0cmluZygpO1xufVxuXG4vLyBzcmMvdXRpbC9wcm94eUhlYWRlcnMudHNcbmZ1bmN0aW9uIGdldFByb3BlcnR5KHRhcmdldCwgcHJvcCkge1xuICBpZiAodHlwZW9mIHByb3AgPT09IFwic3RyaW5nXCIpIHtcbiAgICBmb3IgKGNvbnN0IFtuYW1lLCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXModGFyZ2V0KSkge1xuICAgICAgaWYgKHByb3AudG9Mb3dlckNhc2UoKSA9PT0gbmFtZS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHZvaWQgMDtcbn1cbnZhciBwcm94eUhlYWRlcnMgPSAob2JqZWN0KSA9PiBuZXcgUHJveHkoXG4gIG9iamVjdCxcbiAge1xuICAgIGdldDogKHRhcmdldCwgcHJvcCkgPT4gZ2V0UHJvcGVydHkodGFyZ2V0LCBwcm9wKSxcbiAgICBoYXM6ICh0YXJnZXQsIHByb3ApID0+IGdldFByb3BlcnR5KHRhcmdldCwgcHJvcCkgIT09IHZvaWQgMFxuICB9XG4pO1xuXG4vLyBzcmMvdXRpbC9pc0Zvcm1EYXRhLnRzXG52YXIgaXNGb3JtRGF0YSA9ICh2YWx1ZSkgPT4gQm9vbGVhbihcbiAgdmFsdWUgJiYgaXNGdW5jdGlvbih2YWx1ZS5jb25zdHJ1Y3RvcikgJiYgdmFsdWVbU3ltYm9sLnRvU3RyaW5nVGFnXSA9PT0gXCJGb3JtRGF0YVwiICYmIGlzRnVuY3Rpb24odmFsdWUuYXBwZW5kKSAmJiBpc0Z1bmN0aW9uKHZhbHVlLmdldEFsbCkgJiYgaXNGdW5jdGlvbih2YWx1ZS5lbnRyaWVzKSAmJiBpc0Z1bmN0aW9uKHZhbHVlW1N5bWJvbC5pdGVyYXRvcl0pXG4pO1xuXG4vLyBzcmMvdXRpbC9lc2NhcGVOYW1lLnRzXG52YXIgZXNjYXBlTmFtZSA9IChuYW1lKSA9PiBTdHJpbmcobmFtZSkucmVwbGFjZSgvXFxyL2csIFwiJTBEXCIpLnJlcGxhY2UoL1xcbi9nLCBcIiUwQVwiKS5yZXBsYWNlKC9cIi9nLCBcIiUyMlwiKTtcblxuLy8gc3JjL3V0aWwvaXNGaWxlLnRzXG52YXIgaXNGaWxlID0gKHZhbHVlKSA9PiBCb29sZWFuKFxuICB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgaXNGdW5jdGlvbih2YWx1ZS5jb25zdHJ1Y3RvcikgJiYgdmFsdWVbU3ltYm9sLnRvU3RyaW5nVGFnXSA9PT0gXCJGaWxlXCIgJiYgaXNGdW5jdGlvbih2YWx1ZS5zdHJlYW0pICYmIHZhbHVlLm5hbWUgIT0gbnVsbFxuKTtcblxuLy8gc3JjL0Zvcm1EYXRhRW5jb2Rlci50c1xudmFyIGRlZmF1bHRPcHRpb25zID0ge1xuICBlbmFibGVBZGRpdGlvbmFsSGVhZGVyczogZmFsc2Vcbn07XG52YXIgcmVhZG9ubHlQcm9wID0geyB3cml0YWJsZTogZmFsc2UsIGNvbmZpZ3VyYWJsZTogZmFsc2UgfTtcbnZhciBfQ1JMRiwgX0NSTEZfQllURVMsIF9DUkxGX0JZVEVTX0xFTkdUSCwgX0RBU0hFUywgX2VuY29kZXIsIF9mb290ZXIsIF9mb3JtLCBfb3B0aW9ucywgX2dldEZpZWxkSGVhZGVyLCBnZXRGaWVsZEhlYWRlcl9mbiwgX2dldENvbnRlbnRMZW5ndGgsIGdldENvbnRlbnRMZW5ndGhfZm47XG52YXIgRm9ybURhdGFFbmNvZGVyID0gY2xhc3Mge1xuICBjb25zdHJ1Y3Rvcihmb3JtLCBib3VuZGFyeU9yT3B0aW9ucywgb3B0aW9ucykge1xuICAgIF9fcHJpdmF0ZUFkZCh0aGlzLCBfZ2V0RmllbGRIZWFkZXIpO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgZm9ybS1kYXRhIGNvbnRlbnQgbGVuZ3RoXG4gICAgICovXG4gICAgX19wcml2YXRlQWRkKHRoaXMsIF9nZXRDb250ZW50TGVuZ3RoKTtcbiAgICBfX3ByaXZhdGVBZGQodGhpcywgX0NSTEYsIFwiXFxyXFxuXCIpO1xuICAgIF9fcHJpdmF0ZUFkZCh0aGlzLCBfQ1JMRl9CWVRFUywgdm9pZCAwKTtcbiAgICBfX3ByaXZhdGVBZGQodGhpcywgX0NSTEZfQllURVNfTEVOR1RILCB2b2lkIDApO1xuICAgIF9fcHJpdmF0ZUFkZCh0aGlzLCBfREFTSEVTLCBcIi1cIi5yZXBlYXQoMikpO1xuICAgIC8qKlxuICAgICAqIFRleHRFbmNvZGVyIGluc3RhbmNlXG4gICAgICovXG4gICAgX19wcml2YXRlQWRkKHRoaXMsIF9lbmNvZGVyLCBuZXcgVGV4dEVuY29kZXIoKSk7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBmb3JtLWRhdGEgZm9vdGVyIGJ5dGVzXG4gICAgICovXG4gICAgX19wcml2YXRlQWRkKHRoaXMsIF9mb290ZXIsIHZvaWQgMCk7XG4gICAgLyoqXG4gICAgICogRm9ybURhdGEgaW5zdGFuY2VcbiAgICAgKi9cbiAgICBfX3ByaXZhdGVBZGQodGhpcywgX2Zvcm0sIHZvaWQgMCk7XG4gICAgLyoqXG4gICAgICogSW5zdGFuY2Ugb3B0aW9uc1xuICAgICAqL1xuICAgIF9fcHJpdmF0ZUFkZCh0aGlzLCBfb3B0aW9ucywgdm9pZCAwKTtcbiAgICBpZiAoIWlzRm9ybURhdGEoZm9ybSkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJFeHBlY3RlZCBmaXJzdCBhcmd1bWVudCB0byBiZSBhIEZvcm1EYXRhIGluc3RhbmNlLlwiKTtcbiAgICB9XG4gICAgbGV0IGJvdW5kYXJ5O1xuICAgIGlmIChpc1BsYWluT2JqZWN0KGJvdW5kYXJ5T3JPcHRpb25zKSkge1xuICAgICAgb3B0aW9ucyA9IGJvdW5kYXJ5T3JPcHRpb25zO1xuICAgIH0gZWxzZSB7XG4gICAgICBib3VuZGFyeSA9IGJvdW5kYXJ5T3JPcHRpb25zO1xuICAgIH1cbiAgICBpZiAoIWJvdW5kYXJ5KSB7XG4gICAgICBib3VuZGFyeSA9IGNyZWF0ZUJvdW5kYXJ5KCk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgYm91bmRhcnkgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJFeHBlY3RlZCBib3VuZGFyeSBhcmd1bWVudCB0byBiZSBhIHN0cmluZy5cIik7XG4gICAgfVxuICAgIGlmIChvcHRpb25zICYmICFpc1BsYWluT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRXhwZWN0ZWQgb3B0aW9ucyBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QuXCIpO1xuICAgIH1cbiAgICBfX3ByaXZhdGVTZXQodGhpcywgX2Zvcm0sIEFycmF5LmZyb20oZm9ybS5lbnRyaWVzKCkpKTtcbiAgICBfX3ByaXZhdGVTZXQodGhpcywgX29wdGlvbnMsIHsgLi4uZGVmYXVsdE9wdGlvbnMsIC4uLm9wdGlvbnMgfSk7XG4gICAgX19wcml2YXRlU2V0KHRoaXMsIF9DUkxGX0JZVEVTLCBfX3ByaXZhdGVHZXQodGhpcywgX2VuY29kZXIpLmVuY29kZShfX3ByaXZhdGVHZXQodGhpcywgX0NSTEYpKSk7XG4gICAgX19wcml2YXRlU2V0KHRoaXMsIF9DUkxGX0JZVEVTX0xFTkdUSCwgX19wcml2YXRlR2V0KHRoaXMsIF9DUkxGX0JZVEVTKS5ieXRlTGVuZ3RoKTtcbiAgICB0aGlzLmJvdW5kYXJ5ID0gYGZvcm0tZGF0YS1ib3VuZGFyeS0ke2JvdW5kYXJ5fWA7XG4gICAgdGhpcy5jb250ZW50VHlwZSA9IGBtdWx0aXBhcnQvZm9ybS1kYXRhOyBib3VuZGFyeT0ke3RoaXMuYm91bmRhcnl9YDtcbiAgICBfX3ByaXZhdGVTZXQodGhpcywgX2Zvb3RlciwgX19wcml2YXRlR2V0KHRoaXMsIF9lbmNvZGVyKS5lbmNvZGUoXG4gICAgICBgJHtfX3ByaXZhdGVHZXQodGhpcywgX0RBU0hFUyl9JHt0aGlzLmJvdW5kYXJ5fSR7X19wcml2YXRlR2V0KHRoaXMsIF9EQVNIRVMpfSR7X19wcml2YXRlR2V0KHRoaXMsIF9DUkxGKS5yZXBlYXQoMil9YFxuICAgICkpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICBcIkNvbnRlbnQtVHlwZVwiOiB0aGlzLmNvbnRlbnRUeXBlXG4gICAgfTtcbiAgICBjb25zdCBjb250ZW50TGVuZ3RoID0gX19wcml2YXRlTWV0aG9kKHRoaXMsIF9nZXRDb250ZW50TGVuZ3RoLCBnZXRDb250ZW50TGVuZ3RoX2ZuKS5jYWxsKHRoaXMpO1xuICAgIGlmIChjb250ZW50TGVuZ3RoKSB7XG4gICAgICB0aGlzLmNvbnRlbnRMZW5ndGggPSBjb250ZW50TGVuZ3RoO1xuICAgICAgaGVhZGVyc1tcIkNvbnRlbnQtTGVuZ3RoXCJdID0gY29udGVudExlbmd0aDtcbiAgICB9XG4gICAgdGhpcy5oZWFkZXJzID0gcHJveHlIZWFkZXJzKE9iamVjdC5mcmVlemUoaGVhZGVycykpO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcbiAgICAgIGJvdW5kYXJ5OiByZWFkb25seVByb3AsXG4gICAgICBjb250ZW50VHlwZTogcmVhZG9ubHlQcm9wLFxuICAgICAgY29udGVudExlbmd0aDogcmVhZG9ubHlQcm9wLFxuICAgICAgaGVhZGVyczogcmVhZG9ubHlQcm9wXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gaXRlcmF0b3IgYWxsb3dpbmcgdG8gZ28gdGhyb3VnaCBmb3JtLWRhdGEgcGFydHMgKHdpdGggbWV0YWRhdGEpLlxuICAgKiBUaGlzIG1ldGhvZCAqKndpbGwgbm90KiogcmVhZCB0aGUgZmlsZXMgYW5kICoqd2lsbCBub3QqKiBzcGxpdCB2YWx1ZXMgYmlnIGludG8gc21hbGxlciBjaHVua3MuXG4gICAqXG4gICAqIFVzaW5nIHRoaXMgbWV0aG9kLCB5b3UgY2FuIGNvbnZlcnQgZm9ybS1kYXRhIGNvbnRlbnQgaW50byBCbG9iOlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiBgYGB0c1xuICAgKiBpbXBvcnQge1JlYWRhYmxlfSBmcm9tIFwic3RyZWFtXCJcbiAgICpcbiAgICogaW1wb3J0IHtGb3JtRGF0YUVuY29kZXJ9IGZyb20gXCJmb3JtLWRhdGEtZW5jb2RlclwiXG4gICAqXG4gICAqIGltcG9ydCB7Rm9ybURhdGF9IGZyb20gXCJmb3JtZGF0YS1wb2x5ZmlsbC9lc20tbWluLmpzXCJcbiAgICogaW1wb3J0IHtmaWxlRnJvbX0gZnJvbSBcImZldGNoLWJsb2IvZm9ybS5qc1wiXG4gICAqIGltcG9ydCB7RmlsZX0gZnJvbSBcImZldGNoLWJsb2IvZmlsZS5qc1wiXG4gICAqIGltcG9ydCB7QmxvYn0gZnJvbSBcImZldGNoLWJsb2JcIlxuICAgKlxuICAgKiBpbXBvcnQgZmV0Y2ggZnJvbSBcIm5vZGUtZmV0Y2hcIlxuICAgKlxuICAgKiBjb25zdCBmb3JtID0gbmV3IEZvcm1EYXRhKClcbiAgICpcbiAgICogZm9ybS5zZXQoXCJmaWVsZFwiLCBcIkp1c3QgYSByYW5kb20gc3RyaW5nXCIpXG4gICAqIGZvcm0uc2V0KFwiZmlsZVwiLCBuZXcgRmlsZShbXCJVc2luZyBmaWxlcyBpcyBjbGFzcyBhbWF6aW5nXCJdKSlcbiAgICogZm9ybS5zZXQoXCJmaWxlRnJvbVBhdGhcIiwgYXdhaXQgZmlsZUZyb20oXCJwYXRoL3RvL2EvZmlsZS50eHRcIikpXG4gICAqXG4gICAqIGNvbnN0IGVuY29kZXIgPSBuZXcgRm9ybURhdGFFbmNvZGVyKGZvcm0pXG4gICAqXG4gICAqIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAqICAgbWV0aG9kOiBcInBvc3RcIixcbiAgICogICBib2R5OiBuZXcgQmxvYihlbmNvZGVyLCB7dHlwZTogZW5jb2Rlci5jb250ZW50VHlwZX0pXG4gICAqIH1cbiAgICpcbiAgICogY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChcImh0dHBzOi8vaHR0cGJpbi5vcmcvcG9zdFwiLCBvcHRpb25zKVxuICAgKlxuICAgKiBjb25zb2xlLmxvZyhhd2FpdCByZXNwb25zZS5qc29uKCkpXG4gICAqIGBgYFxuICAgKi9cbiAgKnZhbHVlcygpIHtcbiAgICBmb3IgKGNvbnN0IFtuYW1lLCByYXddIG9mIF9fcHJpdmF0ZUdldCh0aGlzLCBfZm9ybSkpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gaXNGaWxlKHJhdykgPyByYXcgOiBfX3ByaXZhdGVHZXQodGhpcywgX2VuY29kZXIpLmVuY29kZShcbiAgICAgICAgbm9ybWFsaXplVmFsdWUocmF3KVxuICAgICAgKTtcbiAgICAgIHlpZWxkIF9fcHJpdmF0ZU1ldGhvZCh0aGlzLCBfZ2V0RmllbGRIZWFkZXIsIGdldEZpZWxkSGVhZGVyX2ZuKS5jYWxsKHRoaXMsIG5hbWUsIHZhbHVlKTtcbiAgICAgIHlpZWxkIHZhbHVlO1xuICAgICAgeWllbGQgX19wcml2YXRlR2V0KHRoaXMsIF9DUkxGX0JZVEVTKTtcbiAgICB9XG4gICAgeWllbGQgX19wcml2YXRlR2V0KHRoaXMsIF9mb290ZXIpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIGFzeW5jIGl0ZXJhdG9yIGFsbG93aW5nIHRvIHBlcmZvcm0gdGhlIGVuY29kaW5nIGJ5IHBvcnRpb25zLlxuICAgKiBUaGlzIG1ldGhvZCByZWFkcyB0aHJvdWdoIGZpbGVzIGFuZCBzcGxpdHMgYmlnIHZhbHVlcyBpbnRvIHNtYWxsZXIgcGllY2VzICg2NTUzNiBieXRlcyBwZXIgZWFjaCkuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIGBgYHRzXG4gICAqIGltcG9ydCB7UmVhZGFibGV9IGZyb20gXCJzdHJlYW1cIlxuICAgKlxuICAgKiBpbXBvcnQge0Zvcm1EYXRhLCBGaWxlLCBmaWxlRnJvbVBhdGh9IGZyb20gXCJmb3JtZGF0YS1ub2RlXCJcbiAgICogaW1wb3J0IHtGb3JtRGF0YUVuY29kZXJ9IGZyb20gXCJmb3JtLWRhdGEtZW5jb2RlclwiXG4gICAqXG4gICAqIGltcG9ydCBmZXRjaCBmcm9tIFwibm9kZS1mZXRjaFwiXG4gICAqXG4gICAqIGNvbnN0IGZvcm0gPSBuZXcgRm9ybURhdGEoKVxuICAgKlxuICAgKiBmb3JtLnNldChcImZpZWxkXCIsIFwiSnVzdCBhIHJhbmRvbSBzdHJpbmdcIilcbiAgICogZm9ybS5zZXQoXCJmaWxlXCIsIG5ldyBGaWxlKFtcIlVzaW5nIGZpbGVzIGlzIGNsYXNzIGFtYXppbmdcIl0sIFwiZmlsZS50eHRcIikpXG4gICAqIGZvcm0uc2V0KFwiZmlsZUZyb21QYXRoXCIsIGF3YWl0IGZpbGVGcm9tUGF0aChcInBhdGgvdG8vYS9maWxlLnR4dFwiKSlcbiAgICpcbiAgICogY29uc3QgZW5jb2RlciA9IG5ldyBGb3JtRGF0YUVuY29kZXIoZm9ybSlcbiAgICpcbiAgICogY29uc3Qgb3B0aW9ucyA9IHtcbiAgICogICBtZXRob2Q6IFwicG9zdFwiLFxuICAgKiAgIGhlYWRlcnM6IGVuY29kZXIuaGVhZGVycyxcbiAgICogICBib2R5OiBSZWFkYWJsZS5mcm9tKGVuY29kZXIuZW5jb2RlKCkpIC8vIG9yIFJlYWRhYmxlLmZyb20oZW5jb2RlcilcbiAgICogfVxuICAgKlxuICAgKiBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFwiaHR0cHM6Ly9odHRwYmluLm9yZy9wb3N0XCIsIG9wdGlvbnMpXG4gICAqXG4gICAqIGNvbnNvbGUubG9nKGF3YWl0IHJlc3BvbnNlLmpzb24oKSlcbiAgICogYGBgXG4gICAqL1xuICBhc3luYyAqZW5jb2RlKCkge1xuICAgIGZvciAoY29uc3QgcGFydCBvZiB0aGlzLnZhbHVlcygpKSB7XG4gICAgICBpZiAoaXNGaWxlKHBhcnQpKSB7XG4gICAgICAgIHlpZWxkKiBnZXRTdHJlYW1JdGVyYXRvcihwYXJ0LnN0cmVhbSgpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHlpZWxkKiBjaHVuayhwYXJ0KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gaXRlcmF0b3IgYWxsb3dpbmcgdG8gcmVhZCB0aHJvdWdoIHRoZSBlbmNvZGVyIGRhdGEgdXNpbmcgZm9yLi4ub2YgbG9vcHNcbiAgICovXG4gIFtTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIHJldHVybiB0aGlzLnZhbHVlcygpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuICoqYXN5bmMqKiBpdGVyYXRvciBhbGxvd2luZyB0byByZWFkIHRocm91Z2ggdGhlIGVuY29kZXIgZGF0YSB1c2luZyBmb3ItYXdhaXQuLi5vZiBsb29wc1xuICAgKi9cbiAgW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICByZXR1cm4gdGhpcy5lbmNvZGUoKTtcbiAgfVxufTtcbl9DUkxGID0gbmV3IFdlYWtNYXAoKTtcbl9DUkxGX0JZVEVTID0gbmV3IFdlYWtNYXAoKTtcbl9DUkxGX0JZVEVTX0xFTkdUSCA9IG5ldyBXZWFrTWFwKCk7XG5fREFTSEVTID0gbmV3IFdlYWtNYXAoKTtcbl9lbmNvZGVyID0gbmV3IFdlYWtNYXAoKTtcbl9mb290ZXIgPSBuZXcgV2Vha01hcCgpO1xuX2Zvcm0gPSBuZXcgV2Vha01hcCgpO1xuX29wdGlvbnMgPSBuZXcgV2Vha01hcCgpO1xuX2dldEZpZWxkSGVhZGVyID0gbmV3IFdlYWtTZXQoKTtcbmdldEZpZWxkSGVhZGVyX2ZuID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgbGV0IGhlYWRlciA9IFwiXCI7XG4gIGhlYWRlciArPSBgJHtfX3ByaXZhdGVHZXQodGhpcywgX0RBU0hFUyl9JHt0aGlzLmJvdW5kYXJ5fSR7X19wcml2YXRlR2V0KHRoaXMsIF9DUkxGKX1gO1xuICBoZWFkZXIgKz0gYENvbnRlbnQtRGlzcG9zaXRpb246IGZvcm0tZGF0YTsgbmFtZT1cIiR7ZXNjYXBlTmFtZShuYW1lKX1cImA7XG4gIGlmIChpc0ZpbGUodmFsdWUpKSB7XG4gICAgaGVhZGVyICs9IGA7IGZpbGVuYW1lPVwiJHtlc2NhcGVOYW1lKHZhbHVlLm5hbWUpfVwiJHtfX3ByaXZhdGVHZXQodGhpcywgX0NSTEYpfWA7XG4gICAgaGVhZGVyICs9IGBDb250ZW50LVR5cGU6ICR7dmFsdWUudHlwZSB8fCBcImFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbVwifWA7XG4gIH1cbiAgaWYgKF9fcHJpdmF0ZUdldCh0aGlzLCBfb3B0aW9ucykuZW5hYmxlQWRkaXRpb25hbEhlYWRlcnMgPT09IHRydWUpIHtcbiAgICBjb25zdCBzaXplID0gaXNGaWxlKHZhbHVlKSA/IHZhbHVlLnNpemUgOiB2YWx1ZS5ieXRlTGVuZ3RoO1xuICAgIGlmIChzaXplICE9IG51bGwgJiYgIWlzTmFOKHNpemUpKSB7XG4gICAgICBoZWFkZXIgKz0gYCR7X19wcml2YXRlR2V0KHRoaXMsIF9DUkxGKX1Db250ZW50LUxlbmd0aDogJHtzaXplfWA7XG4gICAgfVxuICB9XG4gIHJldHVybiBfX3ByaXZhdGVHZXQodGhpcywgX2VuY29kZXIpLmVuY29kZShgJHtoZWFkZXJ9JHtfX3ByaXZhdGVHZXQodGhpcywgX0NSTEYpLnJlcGVhdCgyKX1gKTtcbn07XG5fZ2V0Q29udGVudExlbmd0aCA9IG5ldyBXZWFrU2V0KCk7XG5nZXRDb250ZW50TGVuZ3RoX2ZuID0gZnVuY3Rpb24oKSB7XG4gIGxldCBsZW5ndGggPSAwO1xuICBmb3IgKGNvbnN0IFtuYW1lLCByYXddIG9mIF9fcHJpdmF0ZUdldCh0aGlzLCBfZm9ybSkpIHtcbiAgICBjb25zdCB2YWx1ZSA9IGlzRmlsZShyYXcpID8gcmF3IDogX19wcml2YXRlR2V0KHRoaXMsIF9lbmNvZGVyKS5lbmNvZGUoXG4gICAgICBub3JtYWxpemVWYWx1ZShyYXcpXG4gICAgKTtcbiAgICBjb25zdCBzaXplID0gaXNGaWxlKHZhbHVlKSA/IHZhbHVlLnNpemUgOiB2YWx1ZS5ieXRlTGVuZ3RoO1xuICAgIGlmIChzaXplID09IG51bGwgfHwgaXNOYU4oc2l6ZSkpIHtcbiAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgfVxuICAgIGxlbmd0aCArPSBfX3ByaXZhdGVNZXRob2QodGhpcywgX2dldEZpZWxkSGVhZGVyLCBnZXRGaWVsZEhlYWRlcl9mbikuY2FsbCh0aGlzLCBuYW1lLCB2YWx1ZSkuYnl0ZUxlbmd0aDtcbiAgICBsZW5ndGggKz0gc2l6ZTtcbiAgICBsZW5ndGggKz0gX19wcml2YXRlR2V0KHRoaXMsIF9DUkxGX0JZVEVTX0xFTkdUSCk7XG4gIH1cbiAgcmV0dXJuIFN0cmluZyhsZW5ndGggKyBfX3ByaXZhdGVHZXQodGhpcywgX2Zvb3RlcikuYnl0ZUxlbmd0aCk7XG59O1xuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIEZvcm1EYXRhRW5jb2RlcixcbiAgaXNGaWxlLFxuICBpc0Zvcm1EYXRhXG59KTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/form-data-encoder/lib/index.cjs\n");

/***/ })

};
;